{
    "privateKey": "{{ cjdns_private_key }}",
    "publicKey": "{{ cjdns_public_key }}",
    "ipv6": "{{ cjdns_ipv6 }}",

    "router": {
        "interface": {
            "type": "TUNInterface",
            "tunDevice": "{{ cjdns_tun_device }}"
        }
    },

    "admin": {
        "bind": "{{ cjdns_admin_address }}:{{ cjdns_admin_port }}",
        "password": "{{ cjdns_admin_password }}"
    },

    "interfaces": {
        "UDPInterface": [
            {
                "bind": "{{ cjdns_udp_address }}:{{ cjdns_udp_port }}",
                "connectTo": {{ cjdns_udp_connections | encode_json(indent='    ',level=4) | string }}
            }
        ]
    },

    "authorizedPasswords": {{ cjdns_authorized_passwords | encode_json(indent='    ',level=1) | string }},

    // Dropping permissions.
    // In the event of a serious security exploit in cjdns, leak of confidential
    // network traffic and/or keys is highly likely but the following rules are
    // designed to prevent the attack from spreading to the system on which cjdns
    // is running.
    // Counter-intuitively, cjdns is *more* secure if it is started as root because
    // non-root users do not have permission to use chroot or change usernames,
    // limiting the effectiveness of the mitigations herein.
    "security": [
        // Change the user id to sandbox the cjdns process after it starts.
        // If keepNetAdmin is set to 0, IPTunnel will be unable to set IP addresses
        // and ETHInterface will be unable to hot-add new interfaces
        // Use { "setuser": 0 } to disable.
        // Default: enabled with keepNetAdmin
        { "setuser": "nobody", "keepNetAdmin": 1 },

        // Chroot changes the filesystem root directory which cjdns sees, blocking it
        // from accessing files outside of the chroot sandbox, if the user does not
        // have permission to use chroot(), this will fail quietly.
        // Use { "chroot": 0 } to disable.
        // Default: enabled (using "/var/run")
        { "chroot": "/var/run/" },

        // Nofiles is a deprecated security feature which prevents cjdns from opening
        // any files at all, using this will block setting of IP addresses and
        // hot-adding ETHInterface devices but for users who do not need this, it
        // provides a formidable sandbox.
        // Default: disabled
        { "nofiles": 0 },

        // Noforks will prevent cjdns from spawning any new processes or threads,
        // this prevents many types of exploits from attacking the wider system.
        // Default: enabled
        { "noforks": 1 },

        // Seccomp is the most advanced sandboxing feature in cjdns, it uses
        // SECCOMP_BPF to filter the system calls which cjdns is able to make on a
        // linux system, strictly limiting it's access to the outside world
        // This will fail quietly on any non-linux system
        // Default: enabled
        { "seccomp": 1 },

        // The client sets up the core using a sequence of RPC calls, the responses
        // to these calls are verified but in the event that the client crashes
        // setup of the core completes, it could leave the core in an insecure state
        // This call constitutes the client telling the core that the security rules
        // have been fully applied and the core may run. Without it, the core will
        // exit within a few seconds with return code 232.
        // Default: enabled
        { "setupComplete": 1 }
    ],

    "logging": {
        //"logTo":"stdout"
    },

    "noBackground": 0
}
